name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Generate cache key
        id: cache-key
        run: echo "key=node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            node-modules-

      - name: Install dependencies
        run: npm ci

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            node-modules-

      - name: Run ESLint (strict)
        run: npm run lint:strict

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            node-modules-

      - name: Run Jest tests
        run: npm run test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, setup]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            node-modules-

      - name: Build application
        run: npm run build

      # Optional: Upload build artifacts
      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-files-${{ github.run_id }}
      #     path: .next/
      #     if-no-files-found: error
      #     retention-days: 1

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Optional: Use artifacts
      # - name: Download build artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: build-files-${{ github.run_id }}
      #     path: .next/

      # Add your deployment steps here
      # Example for Vercel:
      # - name: Deploy to Vercel
      #   uses: amondnet/vercel-action@v25
      #   with:
      #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
      #     vercel-org-id: ${{ secrets.ORG_ID }}
      #     vercel-project-id: ${{ secrets.PROJECT_ID }}
      #     vercel-args: '--prod'

      # Example for custom server deployment:
      # - name: Deploy to server
      #   run: |
      #     echo "Add your deployment commands here"
      #     echo "This could include rsync, scp, or other deployment tools"

      - name: Deployment placeholder
        run: |
          echo "ðŸš€ Deployment step - Configure this based on your hosting platform"
          echo "Available platforms: Vercel, Netlify, AWS, DigitalOcean, etc."
          echo "Build files are ready in .next/ directory"
